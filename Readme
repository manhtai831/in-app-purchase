Điều này có thể dưới hình thức bán các mặt hàng dành riêng cho ứng dụng hoặc các gói đăng ký cho phép người dùng truy cập các tính năng xịn xò trong một thời gian giới hạn,

Để có thể thực hiện được tính năng này, mình xin giới thiệu với các bạn Google Play Billing - một dịch vụ cho phép bạn thanh toán những sản phẩm trong app của mình.

Thành phần chính của google play billing:

Google Play Console: là nơi bạn có thể thiết lập các loại sảm phẩm mà sẽ bán trên ứng dụng của mình cũng như các gói đăng ký sử dụng.

Google Play Billing Library: là thư viện sẽ cần tích hợp vào ứng dụng android của mình

Google Play Developer API: tập hợp các api mà bạn sử dụng để giao tiếp với google play. có thể truy vấn và quản lý các mặt hàng sẽ bán. Ngoài ra, sử dụng api còn có thể xác minh được người dùng có thực sự đã mua sản phẩm hay không hay đang gian lận hoặc kiểm tra có còn hoạt động hay không.

Nào, chúng ta bắt đầu bước vào việc set up môi trường cho In App Purchase.

Đầu tiên chúng ta set up Google Play Billing Library cho ứng dụng của bạn.
Thêm dependency vào trong /build.gradle

implementation ‘com.android.billingclient:billing:3.0.0’

Để có thể tạo được các mặt hàng có thể mua trên google console, chúng ta cần phải upload 1 apk có chứa thư viện Google Billing lên console. Vì vậy sau khi thêm thư viện Google Billing, bạn hãy build 1 bản apk và upload lên play console.

Sau khi đã upload apk lên play console, bạn đã có thể tạo các sản phẩm cũng như các gói sẽ được bán trong GooglePlay Console. Khi tạo mới 1 sản phẩm, bạn được yêu cầu nhập product id cho mặt hàng đó. product id này sẽ không được trùng lặp và không thể thay đổi sau khi tạo.

Sau khi đã set up xong các sản phẩm, gói sẽ được bán, bạn có thể truy vấn các sản phẩm hay gói xem đã thành công hay chưa như sau:

public class Demo extends AppCompatActivity {
    private BillingClient billingClient;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        billingClient = BillingClient.newBuilder(this)
                .enablePendingPurchases()
                .setListener((billingResult, list) -> {
                    //TODO: Hàm này sẽ trả về kết quả khi người dùng thực hiện mua hàng. 
                  
                })
                .build();

        //TODO: Connect ứng dụng của bạn với Google Billing
        billingClient.startConnection(new BillingClientStateListener() {
            @Override
            public void onBillingSetupFinished(@NonNull BillingResult billingResult) {
                //TODO: Sau khi connect thành công, thử lấy thông tin các sản phẩm
                queryProducts();
            }

            @Override
            public void onBillingServiceDisconnected() {
                //TODO: Connect Google Play not success
            }
        });
    }

    private void queryProducts() {
        // TODO: tạo list các product id (chính là product id bạn đã nhập ở bước trước) để lấy thông tin
        List<String> productIds = new ArrayList<>();
        productIds.add("hello_babe");
     
        SkuDetailsParams skuDetailsParams = SkuDetailsParams.newBuilder()
                .setSkusList(productIds)
                .setType(BillingClient.SkuType.INAPP) 
                //TODO: Sử dụng INAPP với one-time product và SUBS với các gói subscriptions. 
                .build();

        // TODO: Thực hiện query
        billingClient.querySkuDetailsAsync(skuDetailsParams, (billingResult, list) -> {
            if (list != null) {
                for (SkuDetails skuDetails: list) {
                    Log.d("Hello babe: ", new Gson().toJson(skuDetails));
                }
            }
        });
    }
}
Sau khi thành công, bạn sẽ lấy được thông tin của các sản phẩm sẽ bán. Chi tiết về các thông tin bạn có thể xem tại SkuDetails

Để đơn giản, bây giờ chúng ta sẽ tập trung vào các giao dịch one-time product, trong bài tiếp theo, chúng tôi sẽ xem xét chi tiết vòng đời phức tạp hơn của Subscription (mua gói)

One-time product là sản phẩm mà người dùng có thể mua với một khoản phí duy nhất và không định kỳ.

One-time product có thể là tiêu thụ được hoặc không tiêu thụ được với tiêu thụ được có nghĩa là người dùng khi sử dụng thì sẽ bị giảm đi nên họ có thể mua nhiều lần khi sử dụng. Ví dụ nếu ứng dụng của bạn cho phép người dùng có thể mua tiền ảo thì đó là sản phẩm tiêu thụ được, còn nếu ứng dụng của bạn có 1 list các truyện và khi người dùng mua truyện nào mới có thể đọc truyện đấy thì đó là sản phẩm không tiêu thụ được.

Sau khi bạn đã định được thứ mà mình muốn bán thuộc loại nào thì chúng ta bắt đầu vào xử lý nhé, quy trình bán sản phẩm sẽ trải qua các bước sau:



1. Thiết lập BillingClient
Lớp BillingClient cho phép ứng dụng của bạn có thể giao tiếp với Play Billing Library. Đầu tiên bạn cần phải connect đến Google Play bằng cách gọi hàm startConnection()

BillingClient billingClient = BillingClient
    .newBuilder(this)
    .enablePendingPurchases()
    .setListener(new PurchasesUpdatedListener() {
                    @Override
                    public void onPurchasesUpdated(@NonNull BillingResult billingResult, @Nullable List<Purchase> list) {
                        //Xử lý kết quả mua hàng. Xem chi tiết hơn ở phần sau
                    }
    })
    .build();
    
billingClient.startConnection(new BillingClientStateListener() {
            @Override
            public void onBillingSetupFinished(@NonNull BillingResult billingResult) {
                if (billingResult.getResponseCode() == OK) {
                    //Connect tới Google Play thành công. Bạn đã có thể lấy những sản phẩm mà người dùng đã mua
                }
            }

            @Override
            public void onBillingServiceDisconnected() {
                //Hiển thị lỗi khi connect thất bại tới google play
            }
        });
2. Lấy những sản phẩm mà người dùng đã mua
Sau khi connect thành công tới Google Play, ứng dụng của bạn đã có thể lấy những sản phẩm mà người dùng đã mua bằng cách gọi hàm queryPurchases(int type) (Param của hàm này hoặc là BillingClient.SkuType.INAPP đối với one-time product và BillingClient.SkuType.SUBS đối với subsciption)

List<Purchase> purchases = billingClient.queryPurchases(BillingClient.SkuType.INAPP).getPurchasesList();
if (purchases == null) {
        //Không có sản phẩm đã mua nào
    } else {
        //xử lý khi có sản phẩm đã mua
    }
Lấy những sản phẩm hiện bán trong app
Đầu tiên bạn cần tạo list các product id được thiết lập trong Google console

 List<String> list = ArrayList<>();
    skuListToQuery.add("product_1");
    skuListToQuery.add("product_2");
    skuListToQuery.add("product_3");
Tạo param cho hàm query

SkuDetailsParams skuDetailsParams = SkuDetailsParams.newBuilder()
                .setSkusList(list)
                .setType(BillingClient.SkuType.INAPP)
                .build();
Sử dụng hàm querySkuDetailsAsync() để lấy thông tin những sản phẩm đang bán trong ứng dụng. Chi tiết thông tin lấy được xem tại đây

billingClient.querySkuDetailsAsync(skuDetailsParams, (billingResult, list) -> {
            if (list != null && !list.isEmpty()) {
                //Đã lấy được thông tin các sản phẩm đang bán theo các product id ở trên
            }
        });
4. Launch purchase flow
Sau khi lấy được thông tin các sản phẩm, khi user click vào mua một sản phẩm, bạn hãy gọi hàm launchBillingFlow() để khởi chạy màn hình mua hàng trên Google Play

Param của hàm này là 1 object BillingFlowParams được tạo ra từ 1 SkuDetails lấy được ở bước 3.

BillingFlowParams billingFlowParams = BillingFlowParams.newBuilder()
                        .setSkuDetails(skuDetails)
                        .build();
                        
billingClient.launchBillingFlow(activity, billingFlowParams);
5. Xử lý kết quả mua hàng
Khi user click vào Buy trong màn hình mua hàng của Google Play, hàm onPurchaseUpdated() đã được setListener ở bước 1 sẽ được gọi để trả về kết quả mua hàng

public void onPurchasesUpdated(@NonNull BillingResult billingResult, @Nullable List<Purchase> list) {
                        //Xử lý kết quả mua hàng. Xem chi tiết hơn ở phần sau
                    }
Dựa vào billingResult.getResponseCode() bạn có thể xác nhận người dùng đã mua thành công hay chưa.

Nếu billingResult.getResponseCode() == OK tức là người dùng đã mua hàng thành công.

ngoài ra hàm còn trả về 1 List<Purchase> bao gồm tất cả các giao dịch mà người dùng đã mua trong app

6. Xác minh và xác nhận mua hàng
Khi sử dụng Play Billing Library 3.0, ứng dụng của bạn cần xác nhận các giao dịch mua thành công để hoàn tất quy trình mua hàng. Nếu ứng dụng của bạn không xác nhận giao dịch mua trong vòng 72 giờ, người dùng sẽ được hoàn tiền và không còn quyền truy cập vào giao dịch mua ban đầu mà họ đã thực hiện.

Các sản phẩm không tiêu thụ được phải được xác nhận bằng cách gọi hàm acknowledgePurchase()

Sản phẩm tiêu thụ phải được đánh dấu là 'đã tiêu thụ' để người dùng có tùy chọn mua thêm.

Điều này được thực hiện với hàm consumeAsync(). Việc gọi điện consumeAsync() cũng xác nhận việc mua hàng như đã được thừa nhận, vì vậy không cần gọi acknowledgePurchase() nữa.

7. Cấp sản phẩm cho người dùng
Sau tất cả các bước trên đều thành công thì bạn phải cung cấp sản phẩm mà người dùng đã mua cho họ

public void handlePurchase(Purchase purchase) {
        handleConsumableProduct(purchase)

        handleNonConsumableProduct(purchase)
    }

    public void handleConsumableProduct(Purchase purchase) {
        ConsumeParams consumeParams =
                ConsumeParams.newBuilder()
                        .setPurchaseToken(purchase.getPurchaseToken())
                        .build();

        billingClient.consumeAsync(consumeParams,(billingResult, purchaseToken) -> {
            if (billingResult.getResponseCode() == OK) {
                // Handle the success of the consume operation.
            }
        });
    }

    public void handleNonConsumableProduct(Purchase purchase) {
        if (purchase.getPurchaseState() == purchase.getPurchaseState()) {
            if (!purchase.isAcknowledged()) {
                AcknowledgePurchaseParams acknowledgePurchaseParams = AcknowledgePurchaseParams.newBuilder()
                        .setPurchaseToken(purchase.getPurchaseToken())
                        .build();
                billingClient.acknowledgePurchase(acknowledgePurchaseParams, billingResult -> {
                    //Handle acknowledge result
                });
            }
        }
    }
    
    #một số link có thể tham khảo
    https://medium.com/androiddevelopers/working-with-google-play-billing-part-2-b859b55426d2
    https://developer.android.com/google/play/billing
    
    
    Để có thể hiểu hơn về cách thức hoạt động cũng như có thể áp dụng project này vào thực tế app của bạn hãy mở phần source của tôi. Đây là phần source cơ bản để có thể áp dụng vào app của bạn
